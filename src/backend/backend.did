type Account = record { owner : principal; subaccount : opt blob };
type CollectionMetadata = record {
  name : text;
  description : opt text;
  max_supply : opt nat64;
  image : opt text;
  total_supply : nat64;
};
type LoginResult = record {
  username : opt text;
  message : text;
  success : bool;
};
type PhysicalArtSession = record {
  status : text;
  updated_at : nat64;
  uploaded_photos : vec text;
  username : text;
  session_id : text;
  art_title : text;
  description : text;
  created_at : nat64;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : nat64; Err : text };
type Result_3 = variant { Ok : bool; Err : text };
type S3Config = record {
  region : text;
  endpoint : opt text;
  secret_access_key : text;
  bucket_name : text;
  access_key_id : text;
};
type Token = record {
  id : nat64;
  session_id : opt text;
  owner : Account;
  metadata : TokenMetadata;
  created_at : nat64;
};
type TokenMetadata = record {
  name : text;
  description : opt text;
  attributes : vec record { text; text };
  image : opt text;
};
type TransferRequest = record {
  to : Account;
  token_id : nat64;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
};
type TransferResponse = record { result : Result_1; token_id : nat64 };
type UploadFileData = record {
  content_type : text;
  file_size : nat64;
  filename : text;
};
service : {
  configure_s3 : (S3Config) -> (bool);
  create_physical_art_session : (text, text, text) -> (Result);
  generate_upload_url : (text, UploadFileData) -> (Result);
  get_all_users : () -> (vec text) query;
  get_s3_config : () -> (opt S3Config) query;
  get_s3_config_status : () -> (bool) query;
  get_session_details : (text) -> (opt PhysicalArtSession) query;
  get_session_nfts : (text) -> (vec Token) query;
  get_token_details : (nat64) -> (opt Token) query;
  get_user_count : () -> (nat64) query;
  get_user_info : (text) -> (opt record { text; nat64 }) query;
  get_user_nfts : (principal) -> (vec Token) query;
  get_user_sessions : (text) -> (vec PhysicalArtSession) query;
  icrc7_balance_of : (vec Account) -> (vec nat64) query;
  icrc7_collection_metadata : () -> (CollectionMetadata) query;
  icrc7_description : () -> (opt text) query;
  icrc7_name : () -> (text) query;
  icrc7_owner_of : (vec nat64) -> (vec opt Account) query;
  icrc7_supply_cap : () -> (opt nat64) query;
  icrc7_token_metadata : (vec nat64) -> (vec opt TokenMetadata) query;
  icrc7_tokens : (opt nat64, opt nat64) -> (vec nat64) query;
  icrc7_tokens_of : (Account, opt nat64, opt nat64) -> (vec nat64) query;
  icrc7_total_supply : () -> (nat64) query;
  icrc7_transfer : (vec TransferRequest) -> (vec TransferResponse);
  login : (text, text) -> (LoginResult);
  mint_nft_from_session : (text, Account, vec record { text; text }) -> (
      Result_2,
    );
  register_user : (text, text) -> (LoginResult);
  remove_photo_from_session : (text, text) -> (Result_3);
  set_s3_config : (S3Config) -> (bool);
  update_collection_metadata : (text, opt text, opt text, opt nat64) -> (
      Result_3,
    );
  update_session_status : (text, text) -> (Result_3);
  upload_photo_to_session : (text, text) -> (Result_3);
}
