type AssistantMessage = record {
  content : opt text;
  tool_calls : vec ToolCall;
};
type ChatMessage = variant {
  tool : record { content : text; tool_call_id : text };
  user : record { content : text };
  assistant : AssistantMessage;
  system : record { content : text };
};
type FunctionCall = record { name : text; arguments : vec ToolCallArgument };
type LoginResult = record {
  username : opt text;
  message : text;
  success : bool;
};
type ToolCall = record { id : text; function : FunctionCall };
type ToolCallArgument = record { value : text; name : text };
service : {
  chat : (vec ChatMessage) -> (text);
  get_all_users : () -> (vec text) query;
  get_user_count : () -> (nat64) query;
  get_user_info : (text) -> (opt record { text; nat64 }) query;
  login : (text, text) -> (LoginResult);
  prompt : (text) -> (text);
  register_user : (text, text) -> (LoginResult);
}
